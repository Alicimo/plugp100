# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Release plugp100

on:
  push:
    branches:
      - test-ci
      #    tags:
#      - v*.*.*

jobs:
  build_dependecy_wheels:
    runs-on: ubuntu-latest
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    strategy:
      matrix:
        arch: [armv7]
        distro: [ubuntu20.04]

    steps:
      - uses: actions/checkout@v2.4.0
      - uses: actions/cache@v2
        name: "Cache pip wheels"
        id: cache-pip-wheels
        with:
          path: |
            ./plugp100/_vendor
            ./.cache-pip
            ./requirements.txt
          key: ${{ runner.os }}-${{ matrix.arch }}-${{ matrix.distro }}-vendoring-${{ hashFiles('**/requirements.txt') }}
      - uses: uraimo/run-on-arch-action@v2.1.1
        if: steps.cache-pip-wheels.outputs.cache-hit != 'true'
        name: Build wheels for ${{ matrix.arch }}
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          install: |
            apt-get update -y
            apt-get install -y software-properties-common
            add-apt-repository ppa:deadsnakes/ppa
            apt-get install -y python3.9 python3.9-distutils curl
            apt-get install -y python3.9-dev build-essential
            apt-get install -y python3.9-venv
            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            python3.9 get-pip.py --user
          run: |
            export PATH=/root/.local/bin/:$PATH
            export PIP_CACHE_DIR=./.cache-pip
            [ -d ./.cache-pip ] && echo "Cache pip directory already exists" || mkdir ./.cache-pip
            chown root:root -R ./.cache-pip
            echo "Generate vendoring wheel..."
            python3.9 build_tools/build_vendoring.py ./plugp100/_vendor ./.cache-pip
            echo "Generate library wheel with the right platform name"
            python3.9 build_tools/build_platform_wheel.py ./plugp100/_vendor requirements.txt
            chmod 777 -R ./.cache-pip

      - name: "Upload generated wheel for ${{ matrix.distro }} ${{ matrix.arch }}"
        uses: actions/upload-artifact@v2
        with:
          name: wheel
          path: dist/*

  publish_pypi:
    name: Publish to PyPi
    runs-on: ubuntu-latest
    needs: [build_dependecy_wheels]

    steps:
      - uses: actions/checkout@v2.4.0
      - name: "Retrieve compiled requirements"
        uses: actions/download-artifact@v2
        with:
          name: wheel
          path: ./dist
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
      - name: Generating Any and Source Distribution
        run: |
          python setup.py sdist bdist_wheel
          ls -R
#      - name: Publish source distribution to PyPi
#        env:
#          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#        run: |
#          python setup.py sdist
#          twine upload dist/*

# python setup.py sdist bdist_wheel (only sdist allow to resolve right arm dependency)